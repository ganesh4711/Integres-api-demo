/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.integrations.orderprocessing.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShpmntConfInItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6253571849918237798L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShpmntConfInItem\",\"namespace\":\"com.integrations.orderprocessing.kafka.schema\",\"fields\":[{\"name\":\"deliveryStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"itemLabelDetailsList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ItemLabelDetails\",\"fields\":[{\"name\":\"cartonLabelId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"labelType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"palletLabelId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"palletNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"}]},\"java-class\":\"java.util.List\"}},{\"name\":\"itemNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"serialNumbers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"java-class\":\"java.util.List\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ShpmntConfInItem> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShpmntConfInItem> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShpmntConfInItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShpmntConfInItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShpmntConfInItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShpmntConfInItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShpmntConfInItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShpmntConfInItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShpmntConfInItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String deliveryStatus;
  private java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> itemLabelDetailsList;
  private java.lang.String itemNumber;
  private java.lang.String productId;
  private int quantity;
  private java.util.List<java.lang.String> serialNumbers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShpmntConfInItem() {}

  /**
   * All-args constructor.
   * @param deliveryStatus The new value for deliveryStatus
   * @param itemLabelDetailsList The new value for itemLabelDetailsList
   * @param itemNumber The new value for itemNumber
   * @param productId The new value for productId
   * @param quantity The new value for quantity
   * @param serialNumbers The new value for serialNumbers
   */
  public ShpmntConfInItem(java.lang.String deliveryStatus, java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> itemLabelDetailsList, java.lang.String itemNumber, java.lang.String productId, java.lang.Integer quantity, java.util.List<java.lang.String> serialNumbers) {
    this.deliveryStatus = deliveryStatus;
    this.itemLabelDetailsList = itemLabelDetailsList;
    this.itemNumber = itemNumber;
    this.productId = productId;
    this.quantity = quantity;
    this.serialNumbers = serialNumbers;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deliveryStatus;
    case 1: return itemLabelDetailsList;
    case 2: return itemNumber;
    case 3: return productId;
    case 4: return quantity;
    case 5: return serialNumbers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deliveryStatus = value$ != null ? value$.toString() : null; break;
    case 1: itemLabelDetailsList = (java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>)value$; break;
    case 2: itemNumber = value$ != null ? value$.toString() : null; break;
    case 3: productId = value$ != null ? value$.toString() : null; break;
    case 4: quantity = (java.lang.Integer)value$; break;
    case 5: serialNumbers = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'deliveryStatus' field.
   * @return The value of the 'deliveryStatus' field.
   */
  public java.lang.String getDeliveryStatus() {
    return deliveryStatus;
  }


  /**
   * Sets the value of the 'deliveryStatus' field.
   * @param value the value to set.
   */
  public void setDeliveryStatus(java.lang.String value) {
    this.deliveryStatus = value;
  }

  /**
   * Gets the value of the 'itemLabelDetailsList' field.
   * @return The value of the 'itemLabelDetailsList' field.
   */
  public java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> getItemLabelDetailsList() {
    return itemLabelDetailsList;
  }


  /**
   * Sets the value of the 'itemLabelDetailsList' field.
   * @param value the value to set.
   */
  public void setItemLabelDetailsList(java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> value) {
    this.itemLabelDetailsList = value;
  }

  /**
   * Gets the value of the 'itemNumber' field.
   * @return The value of the 'itemNumber' field.
   */
  public java.lang.String getItemNumber() {
    return itemNumber;
  }


  /**
   * Sets the value of the 'itemNumber' field.
   * @param value the value to set.
   */
  public void setItemNumber(java.lang.String value) {
    this.itemNumber = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.String getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'serialNumbers' field.
   * @return The value of the 'serialNumbers' field.
   */
  public java.util.List<java.lang.String> getSerialNumbers() {
    return serialNumbers;
  }


  /**
   * Sets the value of the 'serialNumbers' field.
   * @param value the value to set.
   */
  public void setSerialNumbers(java.util.List<java.lang.String> value) {
    this.serialNumbers = value;
  }

  /**
   * Creates a new ShpmntConfInItem RecordBuilder.
   * @return A new ShpmntConfInItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder newBuilder() {
    return new com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder();
  }

  /**
   * Creates a new ShpmntConfInItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShpmntConfInItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder(other);
    }
  }

  /**
   * Creates a new ShpmntConfInItem RecordBuilder by copying an existing ShpmntConfInItem instance.
   * @param other The existing instance to copy.
   * @return A new ShpmntConfInItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShpmntConfInItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShpmntConfInItem>
    implements org.apache.avro.data.RecordBuilder<ShpmntConfInItem> {

    private java.lang.String deliveryStatus;
    private java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> itemLabelDetailsList;
    private java.lang.String itemNumber;
    private java.lang.String productId;
    private int quantity;
    private java.util.List<java.lang.String> serialNumbers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deliveryStatus)) {
        this.deliveryStatus = data().deepCopy(fields()[0].schema(), other.deliveryStatus);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.itemLabelDetailsList)) {
        this.itemLabelDetailsList = data().deepCopy(fields()[1].schema(), other.itemLabelDetailsList);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemNumber)) {
        this.itemNumber = data().deepCopy(fields()[2].schema(), other.itemNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.productId)) {
        this.productId = data().deepCopy(fields()[3].schema(), other.productId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.serialNumbers)) {
        this.serialNumbers = data().deepCopy(fields()[5].schema(), other.serialNumbers);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ShpmntConfInItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.deliveryStatus)) {
        this.deliveryStatus = data().deepCopy(fields()[0].schema(), other.deliveryStatus);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemLabelDetailsList)) {
        this.itemLabelDetailsList = data().deepCopy(fields()[1].schema(), other.itemLabelDetailsList);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemNumber)) {
        this.itemNumber = data().deepCopy(fields()[2].schema(), other.itemNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productId)) {
        this.productId = data().deepCopy(fields()[3].schema(), other.productId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serialNumbers)) {
        this.serialNumbers = data().deepCopy(fields()[5].schema(), other.serialNumbers);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'deliveryStatus' field.
      * @return The value.
      */
    public java.lang.String getDeliveryStatus() {
      return deliveryStatus;
    }


    /**
      * Sets the value of the 'deliveryStatus' field.
      * @param value The value of 'deliveryStatus'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setDeliveryStatus(java.lang.String value) {
      validate(fields()[0], value);
      this.deliveryStatus = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'deliveryStatus' field has been set.
      * @return True if the 'deliveryStatus' field has been set, false otherwise.
      */
    public boolean hasDeliveryStatus() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'deliveryStatus' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearDeliveryStatus() {
      deliveryStatus = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemLabelDetailsList' field.
      * @return The value.
      */
    public java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> getItemLabelDetailsList() {
      return itemLabelDetailsList;
    }


    /**
      * Sets the value of the 'itemLabelDetailsList' field.
      * @param value The value of 'itemLabelDetailsList'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setItemLabelDetailsList(java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> value) {
      validate(fields()[1], value);
      this.itemLabelDetailsList = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemLabelDetailsList' field has been set.
      * @return True if the 'itemLabelDetailsList' field has been set, false otherwise.
      */
    public boolean hasItemLabelDetailsList() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemLabelDetailsList' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearItemLabelDetailsList() {
      itemLabelDetailsList = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemNumber' field.
      * @return The value.
      */
    public java.lang.String getItemNumber() {
      return itemNumber;
    }


    /**
      * Sets the value of the 'itemNumber' field.
      * @param value The value of 'itemNumber'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setItemNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.itemNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemNumber' field has been set.
      * @return True if the 'itemNumber' field has been set, false otherwise.
      */
    public boolean hasItemNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemNumber' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearItemNumber() {
      itemNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setProductId(java.lang.String value) {
      validate(fields()[3], value);
      this.productId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setQuantity(int value) {
      validate(fields()[4], value);
      this.quantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearQuantity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'serialNumbers' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSerialNumbers() {
      return serialNumbers;
    }


    /**
      * Sets the value of the 'serialNumbers' field.
      * @param value The value of 'serialNumbers'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder setSerialNumbers(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.serialNumbers = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'serialNumbers' field has been set.
      * @return True if the 'serialNumbers' field has been set, false otherwise.
      */
    public boolean hasSerialNumbers() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'serialNumbers' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.ShpmntConfInItem.Builder clearSerialNumbers() {
      serialNumbers = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShpmntConfInItem build() {
      try {
        ShpmntConfInItem record = new ShpmntConfInItem();
        record.deliveryStatus = fieldSetFlags()[0] ? this.deliveryStatus : (java.lang.String) defaultValue(fields()[0]);
        record.itemLabelDetailsList = fieldSetFlags()[1] ? this.itemLabelDetailsList : (java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>) defaultValue(fields()[1]);
        record.itemNumber = fieldSetFlags()[2] ? this.itemNumber : (java.lang.String) defaultValue(fields()[2]);
        record.productId = fieldSetFlags()[3] ? this.productId : (java.lang.String) defaultValue(fields()[3]);
        record.quantity = fieldSetFlags()[4] ? this.quantity : (java.lang.Integer) defaultValue(fields()[4]);
        record.serialNumbers = fieldSetFlags()[5] ? this.serialNumbers : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShpmntConfInItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShpmntConfInItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShpmntConfInItem>
    READER$ = (org.apache.avro.io.DatumReader<ShpmntConfInItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.deliveryStatus);

    long size0 = this.itemLabelDetailsList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.integrations.orderprocessing.kafka.schema.ItemLabelDetails e0: this.itemLabelDetailsList) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.itemNumber);

    out.writeString(this.productId);

    out.writeInt(this.quantity);

    long size1 = this.serialNumbers.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.String e1: this.serialNumbers) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.deliveryStatus = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> a0 = this.itemLabelDetailsList;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>((int)size0, SCHEMA$.getField("itemLabelDetailsList").schema());
        this.itemLabelDetailsList = a0;
      } else a0.clear();
      SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.integrations.orderprocessing.kafka.schema.ItemLabelDetails e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.integrations.orderprocessing.kafka.schema.ItemLabelDetails();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.itemNumber = in.readString();

      this.productId = in.readString();

      this.quantity = in.readInt();

      long size1 = in.readArrayStart();
      java.util.List<java.lang.String> a1 = this.serialNumbers;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("serialNumbers").schema());
        this.serialNumbers = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.deliveryStatus = in.readString();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> a0 = this.itemLabelDetailsList;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>((int)size0, SCHEMA$.getField("itemLabelDetailsList").schema());
            this.itemLabelDetailsList = a0;
          } else a0.clear();
          SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.integrations.orderprocessing.kafka.schema.ItemLabelDetails>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.integrations.orderprocessing.kafka.schema.ItemLabelDetails e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.integrations.orderprocessing.kafka.schema.ItemLabelDetails();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.itemNumber = in.readString();
          break;

        case 3:
          this.productId = in.readString();
          break;

        case 4:
          this.quantity = in.readInt();
          break;

        case 5:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.String> a1 = this.serialNumbers;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("serialNumbers").schema());
            this.serialNumbers = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










