/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.integrations.orderprocessing.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GRItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4590772182758366141L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GRItem\",\"namespace\":\"com.integrations.orderprocessing.kafka.schema\",\"fields\":[{\"name\":\"grId\",\"type\":\"long\"},{\"name\":\"gr_rec_id\",\"type\":\"long\"},{\"name\":\"itemNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"itemValuationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"plantId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"storageLocation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GRItem> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GRItem> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GRItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GRItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GRItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GRItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GRItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GRItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GRItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long grId;
  private long gr_rec_id;
  private java.lang.String itemNumber;
  private java.lang.String itemValuationType;
  private java.lang.String plantId;
  private java.lang.String productId;
  private int quantity;
  private java.lang.String storageLocation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GRItem() {}

  /**
   * All-args constructor.
   * @param grId The new value for grId
   * @param gr_rec_id The new value for gr_rec_id
   * @param itemNumber The new value for itemNumber
   * @param itemValuationType The new value for itemValuationType
   * @param plantId The new value for plantId
   * @param productId The new value for productId
   * @param quantity The new value for quantity
   * @param storageLocation The new value for storageLocation
   */
  public GRItem(java.lang.Long grId, java.lang.Long gr_rec_id, java.lang.String itemNumber, java.lang.String itemValuationType, java.lang.String plantId, java.lang.String productId, java.lang.Integer quantity, java.lang.String storageLocation) {
    this.grId = grId;
    this.gr_rec_id = gr_rec_id;
    this.itemNumber = itemNumber;
    this.itemValuationType = itemValuationType;
    this.plantId = plantId;
    this.productId = productId;
    this.quantity = quantity;
    this.storageLocation = storageLocation;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return grId;
    case 1: return gr_rec_id;
    case 2: return itemNumber;
    case 3: return itemValuationType;
    case 4: return plantId;
    case 5: return productId;
    case 6: return quantity;
    case 7: return storageLocation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: grId = (java.lang.Long)value$; break;
    case 1: gr_rec_id = (java.lang.Long)value$; break;
    case 2: itemNumber = value$ != null ? value$.toString() : null; break;
    case 3: itemValuationType = value$ != null ? value$.toString() : null; break;
    case 4: plantId = value$ != null ? value$.toString() : null; break;
    case 5: productId = value$ != null ? value$.toString() : null; break;
    case 6: quantity = (java.lang.Integer)value$; break;
    case 7: storageLocation = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'grId' field.
   * @return The value of the 'grId' field.
   */
  public long getGrId() {
    return grId;
  }


  /**
   * Sets the value of the 'grId' field.
   * @param value the value to set.
   */
  public void setGrId(long value) {
    this.grId = value;
  }

  /**
   * Gets the value of the 'gr_rec_id' field.
   * @return The value of the 'gr_rec_id' field.
   */
  public long getGrRecId() {
    return gr_rec_id;
  }


  /**
   * Sets the value of the 'gr_rec_id' field.
   * @param value the value to set.
   */
  public void setGrRecId(long value) {
    this.gr_rec_id = value;
  }

  /**
   * Gets the value of the 'itemNumber' field.
   * @return The value of the 'itemNumber' field.
   */
  public java.lang.String getItemNumber() {
    return itemNumber;
  }


  /**
   * Sets the value of the 'itemNumber' field.
   * @param value the value to set.
   */
  public void setItemNumber(java.lang.String value) {
    this.itemNumber = value;
  }

  /**
   * Gets the value of the 'itemValuationType' field.
   * @return The value of the 'itemValuationType' field.
   */
  public java.lang.String getItemValuationType() {
    return itemValuationType;
  }


  /**
   * Sets the value of the 'itemValuationType' field.
   * @param value the value to set.
   */
  public void setItemValuationType(java.lang.String value) {
    this.itemValuationType = value;
  }

  /**
   * Gets the value of the 'plantId' field.
   * @return The value of the 'plantId' field.
   */
  public java.lang.String getPlantId() {
    return plantId;
  }


  /**
   * Sets the value of the 'plantId' field.
   * @param value the value to set.
   */
  public void setPlantId(java.lang.String value) {
    this.plantId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.String getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'storageLocation' field.
   * @return The value of the 'storageLocation' field.
   */
  public java.lang.String getStorageLocation() {
    return storageLocation;
  }


  /**
   * Sets the value of the 'storageLocation' field.
   * @param value the value to set.
   */
  public void setStorageLocation(java.lang.String value) {
    this.storageLocation = value;
  }

  /**
   * Creates a new GRItem RecordBuilder.
   * @return A new GRItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GRItem.Builder newBuilder() {
    return new com.integrations.orderprocessing.kafka.schema.GRItem.Builder();
  }

  /**
   * Creates a new GRItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GRItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GRItem.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.GRItem.Builder other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.GRItem.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.GRItem.Builder(other);
    }
  }

  /**
   * Creates a new GRItem RecordBuilder by copying an existing GRItem instance.
   * @param other The existing instance to copy.
   * @return A new GRItem RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GRItem.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.GRItem other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.GRItem.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.GRItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for GRItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GRItem>
    implements org.apache.avro.data.RecordBuilder<GRItem> {

    private long grId;
    private long gr_rec_id;
    private java.lang.String itemNumber;
    private java.lang.String itemValuationType;
    private java.lang.String plantId;
    private java.lang.String productId;
    private int quantity;
    private java.lang.String storageLocation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.GRItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.grId)) {
        this.grId = data().deepCopy(fields()[0].schema(), other.grId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.gr_rec_id)) {
        this.gr_rec_id = data().deepCopy(fields()[1].schema(), other.gr_rec_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemNumber)) {
        this.itemNumber = data().deepCopy(fields()[2].schema(), other.itemNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.itemValuationType)) {
        this.itemValuationType = data().deepCopy(fields()[3].schema(), other.itemValuationType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.plantId)) {
        this.plantId = data().deepCopy(fields()[4].schema(), other.plantId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.productId)) {
        this.productId = data().deepCopy(fields()[5].schema(), other.productId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.quantity)) {
        this.quantity = data().deepCopy(fields()[6].schema(), other.quantity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.storageLocation)) {
        this.storageLocation = data().deepCopy(fields()[7].schema(), other.storageLocation);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing GRItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.GRItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.grId)) {
        this.grId = data().deepCopy(fields()[0].schema(), other.grId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gr_rec_id)) {
        this.gr_rec_id = data().deepCopy(fields()[1].schema(), other.gr_rec_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemNumber)) {
        this.itemNumber = data().deepCopy(fields()[2].schema(), other.itemNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemValuationType)) {
        this.itemValuationType = data().deepCopy(fields()[3].schema(), other.itemValuationType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.plantId)) {
        this.plantId = data().deepCopy(fields()[4].schema(), other.plantId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.productId)) {
        this.productId = data().deepCopy(fields()[5].schema(), other.productId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.quantity)) {
        this.quantity = data().deepCopy(fields()[6].schema(), other.quantity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.storageLocation)) {
        this.storageLocation = data().deepCopy(fields()[7].schema(), other.storageLocation);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'grId' field.
      * @return The value.
      */
    public long getGrId() {
      return grId;
    }


    /**
      * Sets the value of the 'grId' field.
      * @param value The value of 'grId'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setGrId(long value) {
      validate(fields()[0], value);
      this.grId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'grId' field has been set.
      * @return True if the 'grId' field has been set, false otherwise.
      */
    public boolean hasGrId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'grId' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearGrId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gr_rec_id' field.
      * @return The value.
      */
    public long getGrRecId() {
      return gr_rec_id;
    }


    /**
      * Sets the value of the 'gr_rec_id' field.
      * @param value The value of 'gr_rec_id'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setGrRecId(long value) {
      validate(fields()[1], value);
      this.gr_rec_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'gr_rec_id' field has been set.
      * @return True if the 'gr_rec_id' field has been set, false otherwise.
      */
    public boolean hasGrRecId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'gr_rec_id' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearGrRecId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemNumber' field.
      * @return The value.
      */
    public java.lang.String getItemNumber() {
      return itemNumber;
    }


    /**
      * Sets the value of the 'itemNumber' field.
      * @param value The value of 'itemNumber'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setItemNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.itemNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemNumber' field has been set.
      * @return True if the 'itemNumber' field has been set, false otherwise.
      */
    public boolean hasItemNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemNumber' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearItemNumber() {
      itemNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemValuationType' field.
      * @return The value.
      */
    public java.lang.String getItemValuationType() {
      return itemValuationType;
    }


    /**
      * Sets the value of the 'itemValuationType' field.
      * @param value The value of 'itemValuationType'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setItemValuationType(java.lang.String value) {
      validate(fields()[3], value);
      this.itemValuationType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemValuationType' field has been set.
      * @return True if the 'itemValuationType' field has been set, false otherwise.
      */
    public boolean hasItemValuationType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemValuationType' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearItemValuationType() {
      itemValuationType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'plantId' field.
      * @return The value.
      */
    public java.lang.String getPlantId() {
      return plantId;
    }


    /**
      * Sets the value of the 'plantId' field.
      * @param value The value of 'plantId'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setPlantId(java.lang.String value) {
      validate(fields()[4], value);
      this.plantId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'plantId' field has been set.
      * @return True if the 'plantId' field has been set, false otherwise.
      */
    public boolean hasPlantId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'plantId' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearPlantId() {
      plantId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setProductId(java.lang.String value) {
      validate(fields()[5], value);
      this.productId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setQuantity(int value) {
      validate(fields()[6], value);
      this.quantity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearQuantity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'storageLocation' field.
      * @return The value.
      */
    public java.lang.String getStorageLocation() {
      return storageLocation;
    }


    /**
      * Sets the value of the 'storageLocation' field.
      * @param value The value of 'storageLocation'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder setStorageLocation(java.lang.String value) {
      validate(fields()[7], value);
      this.storageLocation = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'storageLocation' field has been set.
      * @return True if the 'storageLocation' field has been set, false otherwise.
      */
    public boolean hasStorageLocation() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'storageLocation' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GRItem.Builder clearStorageLocation() {
      storageLocation = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GRItem build() {
      try {
        GRItem record = new GRItem();
        record.grId = fieldSetFlags()[0] ? this.grId : (java.lang.Long) defaultValue(fields()[0]);
        record.gr_rec_id = fieldSetFlags()[1] ? this.gr_rec_id : (java.lang.Long) defaultValue(fields()[1]);
        record.itemNumber = fieldSetFlags()[2] ? this.itemNumber : (java.lang.String) defaultValue(fields()[2]);
        record.itemValuationType = fieldSetFlags()[3] ? this.itemValuationType : (java.lang.String) defaultValue(fields()[3]);
        record.plantId = fieldSetFlags()[4] ? this.plantId : (java.lang.String) defaultValue(fields()[4]);
        record.productId = fieldSetFlags()[5] ? this.productId : (java.lang.String) defaultValue(fields()[5]);
        record.quantity = fieldSetFlags()[6] ? this.quantity : (java.lang.Integer) defaultValue(fields()[6]);
        record.storageLocation = fieldSetFlags()[7] ? this.storageLocation : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GRItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<GRItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GRItem>
    READER$ = (org.apache.avro.io.DatumReader<GRItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.grId);

    out.writeLong(this.gr_rec_id);

    out.writeString(this.itemNumber);

    out.writeString(this.itemValuationType);

    out.writeString(this.plantId);

    out.writeString(this.productId);

    out.writeInt(this.quantity);

    out.writeString(this.storageLocation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.grId = in.readLong();

      this.gr_rec_id = in.readLong();

      this.itemNumber = in.readString();

      this.itemValuationType = in.readString();

      this.plantId = in.readString();

      this.productId = in.readString();

      this.quantity = in.readInt();

      this.storageLocation = in.readString();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.grId = in.readLong();
          break;

        case 1:
          this.gr_rec_id = in.readLong();
          break;

        case 2:
          this.itemNumber = in.readString();
          break;

        case 3:
          this.itemValuationType = in.readString();
          break;

        case 4:
          this.plantId = in.readString();
          break;

        case 5:
          this.productId = in.readString();
          break;

        case 6:
          this.quantity = in.readInt();
          break;

        case 7:
          this.storageLocation = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










