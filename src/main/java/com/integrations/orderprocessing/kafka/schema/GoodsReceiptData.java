/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.integrations.orderprocessing.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GoodsReceiptData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6778540190879594828L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GoodsReceiptData\",\"namespace\":\"com.integrations.orderprocessing.kafka.schema\",\"fields\":[{\"name\":\"docNum\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderDetails\",\"type\":{\"type\":\"record\",\"name\":\"GROrderDetails\",\"fields\":[{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GRItem\",\"fields\":[{\"name\":\"grId\",\"type\":\"long\"},{\"name\":\"gr_rec_id\",\"type\":\"long\"},{\"name\":\"itemNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"itemValuationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"plantId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"storageLocation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"java-class\":\"java.util.List\"}},{\"name\":\"orderNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"orderReceivedDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"referenceNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GoodsReceiptData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GoodsReceiptData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GoodsReceiptData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GoodsReceiptData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GoodsReceiptData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GoodsReceiptData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GoodsReceiptData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GoodsReceiptData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GoodsReceiptData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String docNum;
  private com.integrations.orderprocessing.kafka.schema.GROrderDetails orderDetails;
  private java.lang.String orderReceivedDate;
  private java.lang.String referenceNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GoodsReceiptData() {}

  /**
   * All-args constructor.
   * @param docNum The new value for docNum
   * @param orderDetails The new value for orderDetails
   * @param orderReceivedDate The new value for orderReceivedDate
   * @param referenceNumber The new value for referenceNumber
   */
  public GoodsReceiptData(java.lang.String docNum, com.integrations.orderprocessing.kafka.schema.GROrderDetails orderDetails, java.lang.String orderReceivedDate, java.lang.String referenceNumber) {
    this.docNum = docNum;
    this.orderDetails = orderDetails;
    this.orderReceivedDate = orderReceivedDate;
    this.referenceNumber = referenceNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return docNum;
    case 1: return orderDetails;
    case 2: return orderReceivedDate;
    case 3: return referenceNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: docNum = value$ != null ? value$.toString() : null; break;
    case 1: orderDetails = (com.integrations.orderprocessing.kafka.schema.GROrderDetails)value$; break;
    case 2: orderReceivedDate = value$ != null ? value$.toString() : null; break;
    case 3: referenceNumber = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'docNum' field.
   * @return The value of the 'docNum' field.
   */
  public java.lang.String getDocNum() {
    return docNum;
  }


  /**
   * Sets the value of the 'docNum' field.
   * @param value the value to set.
   */
  public void setDocNum(java.lang.String value) {
    this.docNum = value;
  }

  /**
   * Gets the value of the 'orderDetails' field.
   * @return The value of the 'orderDetails' field.
   */
  public com.integrations.orderprocessing.kafka.schema.GROrderDetails getOrderDetails() {
    return orderDetails;
  }


  /**
   * Sets the value of the 'orderDetails' field.
   * @param value the value to set.
   */
  public void setOrderDetails(com.integrations.orderprocessing.kafka.schema.GROrderDetails value) {
    this.orderDetails = value;
  }

  /**
   * Gets the value of the 'orderReceivedDate' field.
   * @return The value of the 'orderReceivedDate' field.
   */
  public java.lang.String getOrderReceivedDate() {
    return orderReceivedDate;
  }


  /**
   * Sets the value of the 'orderReceivedDate' field.
   * @param value the value to set.
   */
  public void setOrderReceivedDate(java.lang.String value) {
    this.orderReceivedDate = value;
  }

  /**
   * Gets the value of the 'referenceNumber' field.
   * @return The value of the 'referenceNumber' field.
   */
  public java.lang.String getReferenceNumber() {
    return referenceNumber;
  }


  /**
   * Sets the value of the 'referenceNumber' field.
   * @param value the value to set.
   */
  public void setReferenceNumber(java.lang.String value) {
    this.referenceNumber = value;
  }

  /**
   * Creates a new GoodsReceiptData RecordBuilder.
   * @return A new GoodsReceiptData RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder newBuilder() {
    return new com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder();
  }

  /**
   * Creates a new GoodsReceiptData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GoodsReceiptData RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder(other);
    }
  }

  /**
   * Creates a new GoodsReceiptData RecordBuilder by copying an existing GoodsReceiptData instance.
   * @param other The existing instance to copy.
   * @return A new GoodsReceiptData RecordBuilder
   */
  public static com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder newBuilder(com.integrations.orderprocessing.kafka.schema.GoodsReceiptData other) {
    if (other == null) {
      return new com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder();
    } else {
      return new com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder(other);
    }
  }

  /**
   * RecordBuilder for GoodsReceiptData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GoodsReceiptData>
    implements org.apache.avro.data.RecordBuilder<GoodsReceiptData> {

    private java.lang.String docNum;
    private com.integrations.orderprocessing.kafka.schema.GROrderDetails orderDetails;
    private com.integrations.orderprocessing.kafka.schema.GROrderDetails.Builder orderDetailsBuilder;
    private java.lang.String orderReceivedDate;
    private java.lang.String referenceNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.docNum)) {
        this.docNum = data().deepCopy(fields()[0].schema(), other.docNum);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderDetails)) {
        this.orderDetails = data().deepCopy(fields()[1].schema(), other.orderDetails);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasOrderDetailsBuilder()) {
        this.orderDetailsBuilder = com.integrations.orderprocessing.kafka.schema.GROrderDetails.newBuilder(other.getOrderDetailsBuilder());
      }
      if (isValidValue(fields()[2], other.orderReceivedDate)) {
        this.orderReceivedDate = data().deepCopy(fields()[2].schema(), other.orderReceivedDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[3].schema(), other.referenceNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing GoodsReceiptData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.integrations.orderprocessing.kafka.schema.GoodsReceiptData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.docNum)) {
        this.docNum = data().deepCopy(fields()[0].schema(), other.docNum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderDetails)) {
        this.orderDetails = data().deepCopy(fields()[1].schema(), other.orderDetails);
        fieldSetFlags()[1] = true;
      }
      this.orderDetailsBuilder = null;
      if (isValidValue(fields()[2], other.orderReceivedDate)) {
        this.orderReceivedDate = data().deepCopy(fields()[2].schema(), other.orderReceivedDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referenceNumber)) {
        this.referenceNumber = data().deepCopy(fields()[3].schema(), other.referenceNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'docNum' field.
      * @return The value.
      */
    public java.lang.String getDocNum() {
      return docNum;
    }


    /**
      * Sets the value of the 'docNum' field.
      * @param value The value of 'docNum'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder setDocNum(java.lang.String value) {
      validate(fields()[0], value);
      this.docNum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'docNum' field has been set.
      * @return True if the 'docNum' field has been set, false otherwise.
      */
    public boolean hasDocNum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'docNum' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder clearDocNum() {
      docNum = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDetails' field.
      * @return The value.
      */
    public com.integrations.orderprocessing.kafka.schema.GROrderDetails getOrderDetails() {
      return orderDetails;
    }


    /**
      * Sets the value of the 'orderDetails' field.
      * @param value The value of 'orderDetails'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder setOrderDetails(com.integrations.orderprocessing.kafka.schema.GROrderDetails value) {
      validate(fields()[1], value);
      this.orderDetailsBuilder = null;
      this.orderDetails = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDetails' field has been set.
      * @return True if the 'orderDetails' field has been set, false otherwise.
      */
    public boolean hasOrderDetails() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'orderDetails' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.integrations.orderprocessing.kafka.schema.GROrderDetails.Builder getOrderDetailsBuilder() {
      if (orderDetailsBuilder == null) {
        if (hasOrderDetails()) {
          setOrderDetailsBuilder(com.integrations.orderprocessing.kafka.schema.GROrderDetails.newBuilder(orderDetails));
        } else {
          setOrderDetailsBuilder(com.integrations.orderprocessing.kafka.schema.GROrderDetails.newBuilder());
        }
      }
      return orderDetailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'orderDetails' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder setOrderDetailsBuilder(com.integrations.orderprocessing.kafka.schema.GROrderDetails.Builder value) {
      clearOrderDetails();
      orderDetailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'orderDetails' field has an active Builder instance
     * @return True if the 'orderDetails' field has an active Builder instance
     */
    public boolean hasOrderDetailsBuilder() {
      return orderDetailsBuilder != null;
    }

    /**
      * Clears the value of the 'orderDetails' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder clearOrderDetails() {
      orderDetails = null;
      orderDetailsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderReceivedDate' field.
      * @return The value.
      */
    public java.lang.String getOrderReceivedDate() {
      return orderReceivedDate;
    }


    /**
      * Sets the value of the 'orderReceivedDate' field.
      * @param value The value of 'orderReceivedDate'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder setOrderReceivedDate(java.lang.String value) {
      validate(fields()[2], value);
      this.orderReceivedDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderReceivedDate' field has been set.
      * @return True if the 'orderReceivedDate' field has been set, false otherwise.
      */
    public boolean hasOrderReceivedDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderReceivedDate' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder clearOrderReceivedDate() {
      orderReceivedDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'referenceNumber' field.
      * @return The value.
      */
    public java.lang.String getReferenceNumber() {
      return referenceNumber;
    }


    /**
      * Sets the value of the 'referenceNumber' field.
      * @param value The value of 'referenceNumber'.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder setReferenceNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.referenceNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceNumber' field has been set.
      * @return True if the 'referenceNumber' field has been set, false otherwise.
      */
    public boolean hasReferenceNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'referenceNumber' field.
      * @return This builder.
      */
    public com.integrations.orderprocessing.kafka.schema.GoodsReceiptData.Builder clearReferenceNumber() {
      referenceNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GoodsReceiptData build() {
      try {
        GoodsReceiptData record = new GoodsReceiptData();
        record.docNum = fieldSetFlags()[0] ? this.docNum : (java.lang.String) defaultValue(fields()[0]);
        if (orderDetailsBuilder != null) {
          try {
            record.orderDetails = this.orderDetailsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("orderDetails"));
            throw e;
          }
        } else {
          record.orderDetails = fieldSetFlags()[1] ? this.orderDetails : (com.integrations.orderprocessing.kafka.schema.GROrderDetails) defaultValue(fields()[1]);
        }
        record.orderReceivedDate = fieldSetFlags()[2] ? this.orderReceivedDate : (java.lang.String) defaultValue(fields()[2]);
        record.referenceNumber = fieldSetFlags()[3] ? this.referenceNumber : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GoodsReceiptData>
    WRITER$ = (org.apache.avro.io.DatumWriter<GoodsReceiptData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GoodsReceiptData>
    READER$ = (org.apache.avro.io.DatumReader<GoodsReceiptData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.docNum);

    this.orderDetails.customEncode(out);

    out.writeString(this.orderReceivedDate);

    out.writeString(this.referenceNumber);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.docNum = in.readString();

      if (this.orderDetails == null) {
        this.orderDetails = new com.integrations.orderprocessing.kafka.schema.GROrderDetails();
      }
      this.orderDetails.customDecode(in);

      this.orderReceivedDate = in.readString();

      this.referenceNumber = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.docNum = in.readString();
          break;

        case 1:
          if (this.orderDetails == null) {
            this.orderDetails = new com.integrations.orderprocessing.kafka.schema.GROrderDetails();
          }
          this.orderDetails.customDecode(in);
          break;

        case 2:
          this.orderReceivedDate = in.readString();
          break;

        case 3:
          this.referenceNumber = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










