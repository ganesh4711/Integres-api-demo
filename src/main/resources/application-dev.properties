server.port=8088
spring.main.allow-circular-references=true
spring.main.allow-bean-definition-overriding=true

### Swagger UI properties ###

# Disabling the /v3/api-docs endpoint
springdoc.api-docs.enabled=true

# Disabling the swagger-ui
springdoc.swagger-ui.enabled=true

springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.path=/sei-docs

springdoc.pathsToMatch=/api/v1/integrations/**
#server.forward-headers-strategy=framework

app.local.host=127.0.0.1
app.swagger.server.info.url=http://${app.local.host}:8088
app.swagger.server.info.description = DevEnv

springdoc.writer-with-order-by-keys=true

#############
app.context.path=/api/v1
app.environment=local
app.processed.file.save-in-db=no
app.enable.inward.write-xml=yes

app.sharp.inventory-sync.scheduler.zone=IST

app.stack-enable.order-url=
app.stack-enable.order-delete-url=
app.stack-enable.org-setup=
app.stack-enable.add-account-data=
app.stack-enable.del-account-data=

## RoseRocket Details ##
app.rr.api.base_url=https://platform.roserocket.com/api/v1
app.rr.api.token_url=https://auth.roserocket.com/oauth2/token
app.rr.api.grant_type=password

## Sharp Credentials
app.rr.api.sharp.username=jaswanth.kakarla@imaginnovate.com
app.rr.api.sharp.password=Pass12!@
app.rr.api.sharp.client_id=41283902-6120-4b38-8b79-2b190eab89bf
app.rr.api.sharp.client_secret=LCADT9AwL9kg49ZQYXheefZYvSDebjh7FCpdaPGeOsgsVDBCRy0gX4qOxgQVCcfayYPt6wcWtwyuVXmnlEnBr6PNzn9MvHxRBRutQXGzkWzeSarlpc00pgzotfQjC5F3

app.rr.sharp.customer.id=d3cffdf4-9c59-42e2-b9f0-e2234e558323

## Botrista Credentials
app.rr.api.botrista.username=jaswanth.kakarla@imaginnovate.com
app.rr.api.botrista.password=Pass12!@
app.rr.api.botrista.client_id=41283902-6120-4b38-8b79-2b190eab89bf
app.rr.api.botrista.client_secret=LCADT9AwL9kg49ZQYXheefZYvSDebjh7FCpdaPGeOsgsVDBCRy0gX4qOxgQVCcfayYPt6wcWtwyuVXmnlEnBr6PNzn9MvHxRBRutQXGzkWzeSarlpc00pgzotfQjC5F3

app.rr.botrista.customer.id=7924d400-29bd-4f08-bacc-f33d9d0b13e8

##
shipper.SHARP.org-id=
shipper.SHARP.source=SHARP
shipper.SHARP.carrier-name=SafewayLogistics
shipper.SHARP.warehouse-name=CORONA
shipper.SHARP.shipper-name=SHARP
shipper.SHARP.inventory-sync.path-param=sharp

shipper.BOTRISTA.org-id=
shipper.BOTRISTA.source=BOTRISTA
shipper.BOTRISTA.carrier-name=SafewayLogistics
shipper.BOTRISTA.warehouse-name=
shipper.BOTRISTA.shipper-name=Botrista
shipper.BOTRISTA.inventory-sync.path-param=botrista
##

## DataSource Configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=password
#spring.datasource.driver-class-name=org.postgresql.Driver

#primary database credentials
spring.datasource.primary.url=jdbc:postgresql://${app.local.host}:5432/postgres
spring.datasource.primary.username=postgres
spring.datasource.primary.password=password
spring.datasource.primary.driver=org.postgresql.Driver

#secondary database credentials
spring.datasource.secondary.url=jdbc:postgresql://${app.local.host}:5432/stackenable_local
spring.datasource.secondary.username=stackenable_local
spring.datasource.secondary.password=password
spring.datasource.secondary.driver=org.postgresql.Driver

# JPA Configuration
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate Configuration
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=5
 
management.endpoints.web.exposure.include=*

SHARPController.readXMLFileFromSHARP=readXMLFileFromSHARP
SHARPController.sendGoodsReceipt=sendGoodsReceipt
SHARPController.sendShipmentConfirm=sendShipmentConfirm
SHARPController.sendInventorySync=sendInventorySync


# FleetEnable User Credentials
app.fe.api.login.username=stack.test
app.fe.api.login.password=stack1234

app.fe.api.auth_token.url=https://api-beta.fleetenable.com/api/auth/user_token
app.fe.api.order_save.url=https://api-beta.fleetenable.com/api/order/save
app.fe.api.wms_data_save.url=https://api-beta.fleetenable.com/api/order/saveWMSComments

# FreightSnap API
app.fs.api.login.username=testaccount@test.com
app.fs.api.login.password=123456

app.fs.api.dimensioner_data.url=http://75.81.166.228/WebTrigger/returnDims
app.fs.api.scanner_pro_data.url=http://api.freightsnap.com/pro_data_rest.php
app.fs.api.scanner_range_data.url=http://api.freightsnap.com/ship_datetime_range_data_rest.php

#Optioryx API
api.key=43f758f7-64c5-4600-adae-dd556c330613

optioryx.base.url=https://11hsba0fi4.execute-api.eu-west-3.amazonaws.com/prod/items

app.optioryx.get_items.url=${optioryx.base.url}
app.optioryx.getItemByBarcodes.url=${optioryx.base.url}/barcode
app.optioryx.getItemcount.url=${optioryx.base.url}/count
app.optioryx.getItemById.url=${optioryx.base.url}
app.optioryx.getItemCountByBarcode.url=${optioryx.base.url}/barcode/count

## Kafka Config
app.kafka.topic.stackenable-gr=stackenable-gr
app.kafka.topic.stackenable-sc=stackenable-sc
app.kafka.topic.stackenable-adj=stackenable-adj
app.kafka.topic.stackenable-order=stackenable-order

app.kafka.topic.fleetenable-org-setup=fleetenable-org-setup
app.kafka.topic.fleetenable-account-setup=fleetenable-account-setup
app.kafka.topic.fleetenable-account-delete=fleetenable-account-delete
app.kafka.topic.fleetenable-order=fleetenable-order
app.kafka.topic.stackenable-order-setup=stackenable-order-setup
app.kafka.topic.fleetenable-order-delete=fleetenable-order-delete
app.kafka.topic.stackenable-order-save=stackenable-order-save
app.kafka.topic.stackenable-wms-data-setup=stackenable-wms-data-setup

spring.kafka.producer.bootstrap-servers=${{app.local.host}}:9092
#spring.kafka.producer.bootstrap-servers=${{app.local.host}}:9094,kafka-service:9092
#spring.kafka.producer.properties.schema.registry.url=http://${app.local.host}:8081
#spring.kafka.producer.keySerializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.valueSerializer=io.confluent.kafka.serializers.KafkaAvroSerializer

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer



